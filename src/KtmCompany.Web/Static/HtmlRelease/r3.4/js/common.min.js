/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Created by ha.do on 2/4/2016.
	 */
	var currentVideoSource;
	var is_safari = navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Mac") > -1;
	var mouseovertimeout;
	var counterSections = [{ sel: ".last-price", format: "" }, { sel: ".ebit", format: "" }, { sel: ".revenue", format: "" }, { sel: ".report-downloader", format: "" }, { sel: ".titles", format: "" }, { sel: ".brands", format: "" }, { sel: ".wins", format: "" }, { sel: ".years", format: "" }, { sel: ".years-of-history", format: "" }, { sel: ".parts", format: "" }, { sel: ".employees", format: "thousand" }, { sel: ".bikes-sold", format: "" }];
	var isFirstLoad = true;
	
	/*==========================================*/
	
	function number_format(number, decimals, dec_point, thousands_sep) {
	    // *     example 1: number_format(1234.56);
	    // *     returns 1: '1,235'
	    // *     example 2: number_format(1234.56, 2, ',', ' ');
	    // *     returns 2: '1 234,56'
	    // *     example 3: number_format(1234.5678, 2, '.', '');
	    // *     returns 3: '1234.57'
	    // *     example 4: number_format(67, 2, ',', '.');
	    // *     returns 4: '67,00'
	    // *     example 5: number_format(1000);
	    // *     returns 5: '1,000'
	    // *     example 6: number_format(67.311, 2);
	    // *     returns 6: '67.31'
	    // *     example 7: number_format(1000.55, 1);
	    // *     returns 7: '1,000.6'
	    // *     example 8: number_format(67000, 5, ',', '.');
	    // *     returns 8: '67.000,00000'
	    // *     example 9: number_format(0.9, 0);
	    // *     returns 9: '1'
	    // *    example 10: number_format('1.20', 2);
	    // *    returns 10: '1.20'
	    // *    example 11: number_format('1.20', 4);
	    // *    returns 11: '1.2000'
	    // *    example 12: number_format('1.2000', 3);
	    // *    returns 12: '1.200'
	    var n = !isFinite(+number) ? 0 : +number,
	        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
	        sep = typeof thousands_sep === 'undefined' ? '.' : thousands_sep,
	        dec = typeof dec_point === 'undefined' ? ',' : dec_point,
	        toFixedFix = function toFixedFix(n, prec) {
	        // Fix for IE parseFloat(0.55).toFixed(0) = 0;
	        var k = Math.pow(10, prec);
	        return Math.round(n * k) / k;
	    },
	        s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');
	    if (s[0].length > 3) {
	        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
	    }
	    if ((s[1] || '').length < prec) {
	        s[1] = s[1] || '';
	        s[1] += new Array(prec - s[1].length + 1).join('0');
	    }
	    return s.join(dec);
	}
	
	/*=========================================*/
	
	function animatedBottomLineNavigation() {
	    var $el,
	        leftPos,
	        newWidth,
	        $mainNav = $(".main-nav");
	
	    $mainNav.append("<li id='magic-line'></li>");
	    var $magicLine = $("#magic-line");
	
	    $magicLine.width($(".active").width()).css("left", $(".active a").position().left).data("origLeft", $magicLine.position().left).data("origWidth", $magicLine.width());
	
	    $(".main-nav > li").hover(function () {
	        $el = $(this);
	        leftPos = $el.position().left;
	        newWidth = $el.width();
	        $magicLine.stop().animate({
	            left: leftPos,
	            width: newWidth
	        });
	    }, function () {
	        $magicLine.stop().animate({
	            left: $magicLine.data("origLeft"),
	            width: $magicLine.data("origWidth")
	        });
	    });
	}
	
	function updateAnimatedBottomLinePosition() {
	    var $magicLine = $("#magic-line");
	    $("#magic-line").width($(".active").width()).css("left", $(".active a").position().left).data("origLeft", $magicLine.position().left).data("origWidth", $magicLine.width());
	}
	
	function addCounter(selectorToCount, format) {
	    if ($(selectorToCount + "  .animation-counter")) {
	        $(selectorToCount + " .animation-counter .counter").each(function (index, ele) {
	            var counterObj = {
	                fromValue: parseInt($(this).attr("data-from"), 10),
	                toValue: parseInt($(this).attr("data-to"), 10),
	                speed: parseInt($(this).attr("data-speed"), 10)
	            };
	            var distanceMinMax = counterObj.fromValue < counterObj.toValue ? counterObj.toValue - counterObj.fromValue : counterObj.fromValue - counterObj.toValue;
	            var animatedBlock = $(this).parent();
	
	            if (counterObj.fromValue > counterObj.toValue) {
	                for (var i = counterObj.toValue + 1; i <= counterObj.fromValue; i++) {
	                    switch (format) {
	                        case "thousand":
	                            animatedBlock.prepend("<i>" + number_format(i) + "</i>");
	                            break;
	                        default:
	                            animatedBlock.prepend("<i>" + i + "</i>");
	                            break;
	                    }
	                }
	            } else {
	                for (var i = counterObj.toValue - 1; i >= counterObj.fromValue; i--) {
	                    switch (format) {
	                        case "thousand":
	                            animatedBlock.prepend("<i>" + number_format(i) + "</i>");
	                            break;
	                        default:
	                            animatedBlock.prepend("<i>" + i + "</i>");
	                            break;
	                    }
	                }
	            }
	
	            setTimeout(function () {
	                animatedBlock.animate({ top: -(animatedBlock.find("i").height() * distanceMinMax) }, {
	                    duration: counterObj.speed,
	                    specialEasing: {
	                        top: "swing"
	                    } });
	            }, 100 + index * 50);
	        });
	
	        $(window).on("resize", function () {
	            if ($(selectorToCount + "  .animation-counter")) {
	                $(selectorToCount + "  .animation-counter .counter").each(function (index, ele) {
	                    var counterObj = {
	                        fromValue: parseInt($(this).attr("data-from"), 10),
	                        toValue: parseInt($(this).attr("data-to"), 10),
	                        speed: parseInt($(this).attr("data-speed"), 10)
	                    };
	                    var distanceMinMax = counterObj.fromValue < counterObj.toValue ? counterObj.toValue - counterObj.fromValue : counterObj.fromValue - counterObj.toValue;
	                    var animatedBlock = $(this).parent();
	                    animatedBlock.css({ top: -(animatedBlock.find("i").height() * distanceMinMax) });
	                });
	            }
	        });
	    }
	}
	
	$(document).ready(function () {
	    $('.carousel').carousel();
	    var margL = parseInt(jQuery('header .container').css('margin-left')) + 15;
	    var gridH = parseInt(jQuery('.section-grid').height()) - 10;
	    var rowIntro = jQuery('.row-intro');
	    if (rowIntro && rowIntro.length > 0) {
	        var widthCol4 = jQuery('.row-intro').width() + margL + 1;
	        $('.info-block-content').css({ 'margin-left': margL + 'px' });
	        //$('.slide-img .carousel-indicators').css({ 'padding-left': margL + 'px' });
	        $('.section-info-map').css({
	            'padding-left': margL + 'px',
	            'width': widthCol4 + 'px'
	        });
	    }
	
	    // add Counter for data block
	    for (var section in counterSections) {
	        addCounter(counterSections[section].sel, counterSections[section].format);
	    }
	
	    $('.block-gallery').hover(function () {
	        var images = $(this).find('img');
	        var mouseoverLoopTime = $(this).closest('.gallery-ui').data("looptime");
	        if (isNaN(mouseoverLoopTime)) {
	            mouseoverLoopTime = 200;
	        }
	        slideImages($(this), images, mouseoverLoopTime);
	    }, function () {
	        clearTimeout(mouseovertimeout);
	    });
	});
	
	function scrollingEffects(selectorToAnimate, classAnimated) {
	    /* Every time the window is scrolled ... */
	    $(window).scroll(function () {
	        if (isFirstLoad) {
	            /* Check the location of each desired element */
	            $(selectorToAnimate).each(function (i) {
	                var bottom_of_object = $(this).offset().top + $(this).outerHeight();
	                var bottom_of_window = $(window).scrollTop() + $(window).height();
	
	                /* If the object is completely visible in the window, fade it it */
	                if (bottom_of_window > bottom_of_object) {
	                    isFirstLoad = false;
	                    $(selectorToAnimate).addClass(classAnimated + ' animated').one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
	                        $(this).removeClass(classAnimated + ' animated').css("opacity", 1);
	                    });
	                }
	            });
	        }
	    });
	}
	
	function videoPostedController() {
	    var videoBtn = $(".video-control");
	    var video = $("#postVideo").get(0);
	    if (video) {
	        if (video.readyState == 4 || video.readyState == 3) {
	            videoBtn.click(function () {
	                if (video.paused) {
	                    video.play();
	                    $(this).css("background-image", "url('images/pause-icon.png')");
	                } else {
	                    video.pause();
	                    $(this).css("background-image", "url('images/play-icon.png')");
	                }
	                return false;
	            });
	        } else {
	            setTimeout(videoPostedController, 100);
	        }
	    }
	}
	
	$(function () {
	    var isLoopingTextInVideo = false;
	    var textMessage = $('#text-message');
	    var textMessageSpan = $('#text-message span');
	    var fadein = textMessage.data('fadeIn');
	    var fadeOut = textMessage.data('fadeOut');
	    var loop = textMessage.data('loop');
	    var duration = textMessage.data('duration');
	    var messages = "";
	    if (textMessage.data('text')) {
	        messages = textMessage.data('text').split('|');
	    }
	
	    function nextMsg(i) {
	        if (messages.length == i) {
	            i = 0;
	        }
	        if (isLoopingTextInVideo) {
	            textMessageSpan.html(messages[i]).fadeIn(fadein);
	        } else {
	            textMessageSpan.html(messages[i]).show();
	        }
	        return i + 1;
	    };
	
	    var currentTextLoopIndex = 0;
	    var videoTextLoopInterval = null;
	
	    function toggleVideoTextMessage(show) {
	        isLoopingTextInVideo = show;
	        if (show) {
	            videoTextLoopInterval = setInterval(function () {
	                textMessageSpan.fadeOut(fadeOut, function () {
	                    currentTextLoopIndex = nextMsg(currentTextLoopIndex);
	                });
	            }, duration);
	        } else {
	            if (videoTextLoopInterval != null) {
	                clearInterval(videoTextLoopInterval);
	            }
	        }
	    }
	
	    if (loop == false || messages.length == 1) {
	        textMessageSpan.html(messages[0]);
	    } else {
	        toggleVideoTextMessage(true);
	    }
	
	    //control the video banner player
	    //select video player in VideoBannerBlock
	    var videoCurrentTimes = new Array(); //get current playing time
	    $("#videoBanner").each(function (index, video) {
	        videoCurrentTimes.push(0);
	        currentVideoSource = video.src;
	        toggleVideoTextMessage(false);
	
	        $(video).parent().find('.videoBannerText, #videoBanner').click(function (e) {
	            var paused = video.paused;
	            if (paused) {
	                $('.video-poster').css("display", "none");
	                video.play();
	                toggleVideoTextMessage(true);
	            } else {
	                $('.video-poster').css("display", "block");
	                video.pause();
	                toggleVideoTextMessage(false);
	                videoCurrentTimes[index] = video.currentTime;
	            }
	        });
	
	        //display poster after finish video playing
	        video.onended = function () {
	            this.load();
	            this.pause();
	            videoCurrentTimes[index] = 0;
	            currentTextLoopIndex = 0;
	            $('.video-poster').css("display", "block");
	            toggleVideoTextMessage(false);
	        };
	    });
	
	    function checkLoad() {
	        var video = document.getElementById("videoBanner");
	
	        if (video != null && video != undefined) {
	            if (video.readyState === 4) {
	                if (!video.paused) {
	                    $('.video-poster').css("display", "none");
	                    toggleVideoTextMessage(true);
	                }
	
	                $('.video-poster').click(function () {
	                    if (video.paused) {
	                        $('.video-poster').css("display", "none");
	                        video.play();
	                        toggleVideoTextMessage(true);
	                    }
	                });
	            } else {
	                setTimeout(checkLoad, 100);
	            }
	        }
	    }
	
	    checkLoad();
	});
	
	function slideImages(galleryItem, images, mouseoverLoopTime) {
	    if (images.length > 1) {
	        images.each(function (index, image) {
	            if ($(image).hasClass('active')) {
	                $(image).removeClass('active');
	                var nextIndex = index + 1;
	                if (nextIndex == images.length) {
	                    nextIndex = 0;
	                }
	                var nextImage = $(images[nextIndex]);
	                nextImage.addClass('active');
	                galleryItem.css("background-image", "url('" + nextImage.attr('src') + "')");
	                mouseovertimeout = setTimeout(function () {
	                    slideImages(galleryItem, images, mouseoverLoopTime);
	                }, mouseoverLoopTime);
	                return false;
	            }
	        });
	    }
	}
	
	function slideDownMainMenu() {
	    var mainList = $(".main-nav li a");
	    var isOverSubMenu = false;
	    var isOverMainMenu = false;
	
	    mainList.hover(function () {
	        isOverMainMenu = true;
	        var directSubMenu = $("#" + $(this).attr("data-parent-menu").replace(" ", "-") + "-sub-menu");
	        $(".sub-menu").css({ opacity: 0, top: 100, visibility: "hidden" });
	        directSubMenu.find("li").each(function (index, ele) {
	            $(ele).removeAttr("style");
	        });
	        directSubMenu.css({ opacity: 1, top: 195, visibility: "visible" });
	        directSubMenu.find("li").each(function (index, ele) {
	            setTimeout(function () {
	                $(ele).animate({
	                    'opacity': 1.0,
	                    'top': 0
	                }, {
	                    duration: 700
	                });
	            }, 100 + index * 50);
	        });
	    }, function () {
	        isOverMainMenu = false;
	        var directSubMenu = $("#" + $(this).attr("data-parent-menu").replace(" ", "-") + "-sub-menu");
	        setTimeout(function () {
	            if (!isOverSubMenu) {
	                directSubMenu.css({ opacity: 0, top: 100, visibility: "hidden" });
	                directSubMenu.find("li").each(function (index, ele) {
	                    $(ele).removeAttr("style");
	                });
	            }
	        }, 100);
	    });
	
	    $(".sub-menu").hover(function () {
	        isOverSubMenu = true;
	    }, function () {
	        isOverSubMenu = false;
	        $(".sub-menu").find("li").each(function (index, ele) {
	            $(ele).removeAttr("style");
	        });
	        setTimeout(function () {
	            if (!isOverMainMenu) $(".sub-menu").css({ opacity: 0, top: 100, visibility: "hidden" });
	        }, 100);
	    });
	}
	
	function sharePriceDataSelection() {
	    var sharePriceTable = $(".share-price");
	    var sharePriceCombobox = $(".share-price .years-selection");
	
	    if (sharePriceCombobox) {
	        sharePriceCombobox.change(function () {
	            var selectedYear = $("select option:selected").val();
	
	            switch (selectedYear) {
	                case "2010":
	                    sharePriceTable.find(".yearly").hide();
	                    sharePriceTable.find(".year-2010").show();
	                    break;
	                case "2012":
	                    sharePriceTable.find(".yearly").hide();
	                    sharePriceTable.find(".year-2012").show();
	                    break;
	                case "2013":
	                    sharePriceTable.find(".yearly").hide();
	                    sharePriceTable.find(".year-2013").show();
	                    break;
	                case "2014":
	                    sharePriceTable.find(".yearly").hide();
	                    sharePriceTable.find(".year-2014").show();
	                    break;
	                case "2015":
	                    sharePriceTable.find(".yearly").hide();
	                    sharePriceTable.find(".year-2015").show();
	                    break;
	            }
	        });
	    }
	}
	
	function searchPlaceHolder() {
	    var bgUrl = "url('../images/search.png')";
	    $("#search-sub-menu .input-form").on("change keydown paste input", function () {
	        if ($(this).val() == "") {
	            $(this).css("background-image", bgUrl);
	        } else {
	            $(this).css("background-image", "none");
	        }
	    });
	}
	
	function hideMenuNavigation() {
	    // for resize to hide menu navigation
	    if ($(".main-nav-responsive").css("display") != "none") {
	        $(".main-nav-responsive").hide();
	        $(".icon").removeClass("open");
	        $(".sub-menu-responsive").hide();
	        $(".sub-menu-responsive").parent().find("a").css("border-bottom", "1px solid #777777");
	        $(".sub-menu-responsive").parent().find(".nav-arrow").removeClass("fa-angle-up").addClass("fa-angle-down");
	    }
	}
	
	function hoverOnTouchDevices(element, classToRemove) {
	    $(element).on("touchstart MSPointerDown", function (event) {
	        if (event.touches.length > 1) return;
	        $(".type-of-categories ul li").removeClass(classToRemove);
	        $(this).addClass(classToRemove);
	    });
	}
	
	function minHeightSliders() {
	    if ($(window).width() >= 768) {
	        // set min-height for carousel sliders
	        setTimeout(function () {
	            $(".carousel").each(function () {
	                var minHeight = $(this).find(".carousel-inner").height();
	                $(this).css({ height: minHeight });
	            });
	        }, 100);
	    } else {
	        $(".carousel").removeAttr("style");
	    }
	}
	
	$(window).on("resize", function () {
	    updateAnimatedBottomLinePosition();
	    //minHeightSliders();
	});
	
	$(window).on("orientationchange", function () {
	    hideMenuNavigation();
	});
	
	$(document).ready(function () {
	
	    hoverOnTouchDevices(".type-of-categories ul li", "active");
	    // slide toggle
	    $(".btn-toggle").click(function () {
	        var timeLineFull = $(this).parent().parent().find('.timeline-full');
	        var isVisible = $(timeLineFull).is(":visible");
	        $('.btn-toggle').removeClass('fa-angle-up').addClass('fa-angle-down');
	        $(".timeline-full").slideUp();
	        if (isVisible) {
	            $(timeLineFull).slideUp();
	            $(this).removeClass('fa-angle-up').addClass('fa-angle-down');
	        } else {
	            $(timeLineFull).slideDown();
	            $(this).removeClass('fa-angle-down').addClass('fa-angle-up');
	        }
	    });
	
	    //RESPONSIVE: header navigation
	
	    $(".icon").on("click", function () {
	
	        $(".main-nav-responsive").slideToggle();
	        $(this).toggleClass('open');
	
	        return false;
	    });
	
	    if ($(".main-nav-responsive li .sub-menu-responsive").css("display") != "none") $(".main-nav-responsive li .sub-menu").parent().find("a").css("border", "none");
	    $(".main-nav-responsive > li > .nav-arrow").on("click", function () {
	        var hasSub = $(this).parent().has(".sub-menu-responsive");
	        var sub = $(this).parent().find(".sub-menu-responsive");
	        if (sub.css("display") == "none") {
	            sub.parent().find("a").css("border", "none");
	            sub.slideDown();
	            $(this).parent().find(".nav-arrow").removeClass("fa-angle-down").addClass("fa-angle-up");
	        } else {
	            sub.slideUp(function () {
	                sub.parent().find("a").css("border-bottom", "1px solid #777777");
	            });
	            $(this).parent().find(".nav-arrow").removeClass("fa-angle-up").addClass("fa-angle-down");
	        }
	        if ($(this).attr("href") == "#") return false;
	    });
	
	    // RESPONSIVE: add clear-input button to clear text in search text box
	    $(".form-search .clear-input").on("click", function () {
	        $(this).parent().find(".input-form").val("");
	        $(this).parent().find(".input-form").val("");
	        return false;
	    });
	
	    slideDownMainMenu();
	    animatedBottomLineNavigation();
	    updateAnimatedBottomLinePosition();
	    sharePriceDataSelection();
	    videoPostedController();
	    searchPlaceHolder();
	    //minHeightSliders();
	    scrollingEffects(".quote-module", "fadeInUp");
	});
	
	// calculate and set .draggable width
	
	$.fn.draggable_nav_calc = function (options) {
	    return this.each(function (i) {
	        var $element = $(this);
	        if ($element.is(":visible")) {
	            // x or y
	            if (options.axis === "x") {
	                // calculate
	                var navWidth = 1;
	                $element.find("> *").each(function (i) {
	                    navWidth += $(this).outerWidth(true);
	                });
	                // set width
	                var parentWidth = $element.parent().width();
	                if (navWidth > parentWidth) {
	                    $element.css("width", navWidth);
	                } else {
	                    $element.css("width", parentWidth);
	                }
	            } else if (options.axis === "y") {
	                // calculate
	                var navHeight = 1;
	                $element.find("> *").each(function (i) {
	                    navHeight += $(this).outerHeight(true);
	                });
	                // set height
	                var parentHeight = $element.parent().width();
	                if (navHeight > parentHeight) {
	                    $element.css("height", navHeight);
	                } else {
	                    $element.css("height", parentHeight);
	                }
	            }
	        }
	    });
	};
	
	// check inside bounds
	
	$.fn.draggable_nav_check = function () {
	    return this.each(function (i) {
	        var $element = $(this);
	        // calculate
	        var w = $element.width();
	        var pw = $element.parent().width();
	        var maxPosLeft = 0;
	        if (w > pw) {
	            maxPosLeft = -(w - pw);
	        }
	        var h = $element.height();
	        var ph = $element.parent().height();
	        var maxPosTop = 0;
	        if (h > ph) {
	            maxPosTop = h - ph;
	        }
	        // horizontal
	        var left = parseInt($element[0].style.left);
	        if (left > 0) {
	            $element.css("left", 0);
	        } else if (left < maxPosLeft) {
	            $element.css("left", maxPosLeft);
	        }
	        // vertical
	        var top = parseInt($element[0].style.top);
	        if (top > 0) {
	            $element.css("top", 0);
	        } else if (top < maxPosTop) {
	            $element.css("top", maxPosTop);
	        }
	    });
	};
	
	// init draggable nav
	
	$.fn.draggable_nav = function (options) {
	    return this.each(function (i) {
	        var $element = $(this);
	        // calculate first time, after delay to fix resize bugs
	        window.setTimeout(function (e) {
	            $element.draggable_nav_calc(options);
	        }, 100);
	        // on shown tabs recalculate
	        $element.find('[data-toggle="tab"]').on('shown.bs.tab', function (e) {
	            $element.draggable_nav_calc(options);
	        });
	        // on resize recalculate
	        function draggable_nav_resize_after() {
	            clearTimeout($element.data("draggable_nav_timeout"));
	            var timeout = window.setTimeout(function (e) {
	                $element.draggable_nav_calc(options);
	                $element.draggable_nav_check();
	            }, 0);
	            $element.data("draggable_nav_timeout", timeout);
	        }
	        $(window).on('resize', draggable_nav_resize_after);
	        $(window).on('scroll', draggable_nav_resize_after);
	        // center clicked element
	        if ($element.hasClass("draggable-center")) {
	            $element.find('li a[data-toggle="tab"]').on("shown.bs.tab", function (e) {
	                var $container = $(this).parents(".draggable-container");
	                var $li = $(this).parents("li");
	                if (options.axis === "x") {
	                    var left = -$li.position().left + $container.outerWidth() / 2 - $li.outerWidth() / 2;
	                    $element.css("left", left);
	                } else if (options.axis === "y") {
	                    var top = -$li.position().top + $container.outerWidth() / 2 - $li.outerWidth() / 2;
	                    $element.css("top", top);
	                }
	                // put inside bounds
	                $element.draggable_nav_check();
	            });
	        }
	    });
	};
	$(".draggable").draggable_nav({
	    axis: 'x' // only horizontally
	});
	
	// jquery ui draggable
	
	$(".draggable").draggable({
	    axis: 'x', // only horizontally
	    drag: function drag(e, ui) {
	        var $element = ui.helper;
	        // calculate
	        var w = $element.width();
	        var pw = $element.parent().width();
	        var maxPosLeft = 0;
	        if (w > pw) {
	            maxPosLeft = -(w - pw);
	        }
	        var h = $element.height();
	        var ph = $element.parent().height();
	        var maxPosTop = 0;
	        if (h > ph) {
	            maxPosTop = h - ph;
	        }
	        // horizontal
	        if (ui.position.left > 0) {
	            ui.position.left = 0;
	        } else if (ui.position.left < maxPosLeft) {
	            ui.position.left = maxPosLeft;
	        }
	        // vertical
	        if (ui.position.top > 0) {
	            ui.position.top = 0;
	        } else if (ui.position.top < maxPosTop) {
	            ui.position.top = maxPosTop;
	        }
	    }
	});
	
	// jquey draggable also on touch devices
	// http://stackoverflow.com/questions/5186441/javascript-drag-and-drop-for-touch-devices
	
	function touchHandler(e) {
	    var touch = e.originalEvent.changedTouches[0];
	    var simulatedEvent = document.createEvent("MouseEvent");
	    simulatedEvent.initMouseEvent({
	        touchstart: "mousedown",
	        touchmove: "mousemove",
	        touchend: "mouseup"
	    }[e.type], true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
	    touch.target.dispatchEvent(simulatedEvent);
	}
	
	function preventPageScroll(e) {
	    e.preventDefault();
	}
	
	function initTouchHandler($element) {
	    $element.on("touchstart touchmove touchend touchcancel", touchHandler);
	    $element.on("touchmove", preventPageScroll);
	}
	initTouchHandler($(".draggable"));
	
	$('.form').valida();
	/***********************Ngoc Tran***********************/
	$(document).ready(function () {
	    if ($(window).width() >= 768) {
	        equals_height();
	    }
	    $(window).resize(function () {
	        equals_height();
	        if ($(window).width() < 768) $('.equal-height').removeAttr('style');
	    });
	});
	
	function equals_height() {
	    $('.equal-height').removeAttr('style');
	    $('.equal-height-container').each(function () {
	        // Cache the highest
	        var highestBox = 0;
	        // Select and loop the elements you want to equalise
	        $('.equal-height', this).each(function () {
	            // If this box is higher than the cached highest then store it
	            if ($(this).height() > highestBox) {
	                highestBox = $(this).height();
	            }
	        });
	        // Set the height of all those children to whichever was highest
	        $('.equal-height', this).height(highestBox);
	    });
	}
	var owl = $('.slide-inner-ktm');
	function carreer_path_carousel() {
	    var option = {
	        responsiveClass: true,
	        items: 1,
	        responsive: {
	            1660: { items: 3 },
	            1200: { items: 2 }
	        },
	        smartSpeed: 500,
	        loop: false,
	        nav: false,
	        dots: true
	    };
	    owl.owlCarousel(option);
	}
	
	function setIndicatorIndex() {
	    var dot_index = 0;
	    var indicators_contents = '';
	    $('.owl-dots .owl-dot').each(function () {
	        indicators_contents += '<li></li>';
	        if ($(this).hasClass('active')) {
	            dot_index = $(this).index();
	        }
	    });
	    $('.owl-indicators').html('').append(indicators_contents);
	    $('.owl-indicators').find("li").eq(dot_index).addClass('active').siblings().removeClass('active');
	}
	function activeIndicator(container) {
	    var dot_index = 0;
	    $('.owl-dot').each(function () {
	        if ($(this).hasClass('active')) {
	            dot_index = $(this).index();
	        }
	    });
	    container.find('.owl-indicators li').eq(dot_index).addClass('active').siblings().removeClass('active');
	}
	$(document).ready(function () {
	    carreer_path_carousel();
	    setIndicatorIndex();
	    $('.owl-indicators li').click(function () {
	        var _self = $(this);
	        _self.addClass('active').siblings().removeClass('active');
	        _self.parents('.slide').find('.owl-theme .owl-dots .owl-dot').eq(_self.index()).trigger('click');
	    });
	    owl.on('changed.owl.carousel', function (e) {
	        activeIndicator(owl.parents('.carousel'));
	    });
	    $(".carousel").swiperight(function () {
	        $(this).carousel('prev');
	    });
	    $(".carousel").swipeleft(function () {
	        $(this).carousel('next');
	    });
	});

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,