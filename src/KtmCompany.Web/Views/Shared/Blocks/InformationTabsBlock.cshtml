@using EPiServer.Core
@using EPiServer.Web.Mvc.Html
@using KtmCompany.Web.Helpers
@using KtmCompany.Web.Infrastructure.Extensions

@model InformationTabsBlock

@{
    var guid = Guid.NewGuid().ToString();
    var guidContainer = guid + "-container";
    var guidCategoryDropdown = guid + "cat-ddn";
    var guidCategoryTabs = guid + "cat-tabs";
    var tabItems = Model.TabItems.GetItems<IContent>();
    var showTabForAllItem = !string.IsNullOrEmpty(Model.AllItemsTabTitle);
    var queryActiveTab = Request.QueryString["tab"];
    var currentActiveTab = string.Empty;
    if (!string.IsNullOrEmpty(queryActiveTab))
    {
        var currentTabItem = tabItems.FirstOrDefault(t => t.Name.Equals(queryActiveTab, StringComparison.InvariantCultureIgnoreCase));
        if (currentTabItem != null)
        {
            currentActiveTab = currentTabItem.Name;
        }
    }
}
@functions{
    private string FormatTabId(string guid, int index)
    {
        return string.IsNullOrEmpty(guid) ? "" : (guid + "--" + index);
    }
}
<section class="sticky-container section" id="@guid" >
    <div class="container">
        <div class="row tripple-row table-style">
            <div id="row-intro-news" class="col-xs-12 col-sm-5 col-md-4 tripple-column-space table-row seperate-line padding-section">
                <div class="block-main-intro">
                    <div class="outer-main-intro has-dropdown">
                        @Html.PropertyFor(m => m.LeftContent, new { removeWrapperContainer = true })
                        <div class="type-of-categories-mobile" @Html.EditAttributes(m => m.TabItems)>
                            @if (tabItems.Any())
                            {
                                <div class="category-dropdown">
                                    <select id="@guidCategoryDropdown" name="category" class="category" content-container="#@guidContainer" category-tabs="#@guidCategoryTabs">
                                        @{
                                            if (showTabForAllItem)
                                            {
                                                var selectedString = currentActiveTab.Equals("All", StringComparison.InvariantCultureIgnoreCase) ? "selected = \"selected\"" : string.Empty;
                                                <option value="@Model.AllItemsTabTitle" tab-id="All" title="@Model.AllItemsTabTitle" @Html.Raw(selectedString)>@Model.AllItemsTabTitle</option>
                                            }
                                            for (int index = 0; index < tabItems.Count; index++)
                                            {
                                                var tabId = FormatTabId(guid, index);
                                                var tabItem = tabItems[index];
                                                var selectedString = currentActiveTab.Equals(tabItem.Name, StringComparison.InvariantCultureIgnoreCase) ? "selected = \"selected\"" : string.Empty;
                                                <option value="@tabItem.Name" tab-id="@tabId" title="@tabItem.Name" @Html.Raw(selectedString)>@tabItem.Name</option>
                                            }
                                        }
                                    </select>
                                </div>
                            }
                        </div>
                        <div class="type-of-categories" @Html.EditAttributes(m => m.TabItems)>
                            @if (tabItems.Any())
                            {
                                <ul id="@guidCategoryTabs">
                                    @{
                                        if (showTabForAllItem)
                                        {
                                            var additionClass = ((string.IsNullOrEmpty(currentActiveTab)) ||
                                                                 (!(string.IsNullOrEmpty(currentActiveTab)) && currentActiveTab.Equals("All", StringComparison.InvariantCultureIgnoreCase)))
                                                ? "active" : string.Empty;
                                            <li class="@additionClass">
                                                <a class="tab-selection" tab-id="All" href="#" title="@Model.AllItemsTabTitle" content-container="#@guidContainer"
                                                   category-dropdown="#@guidCategoryDropdown">
                                                    <span>@Model.AllItemsTabTitle</span>
                                                </a>
                                            </li>
                                        }
                                        for (int index = 0; index < tabItems.Count; index++)
                                        {
                                            var tabId = FormatTabId(guid, index);
                                            var tabItem = tabItems[index];

                                            var additionClass = ((string.IsNullOrEmpty(currentActiveTab) && index == 0 && !showTabForAllItem) ||
                                                                 (!(string.IsNullOrEmpty(currentActiveTab)) && currentActiveTab.Equals(tabItem.Name, StringComparison.InvariantCultureIgnoreCase)))
                                                ? "active" : string.Empty;

                                            <li class="@additionClass">
                                                <a class="tab-selection" tab-id="@tabId" href="#" title="@tabItem.Name" content-container="#@guidContainer" category-dropdown="#@guidCategoryDropdown">
                                                    <span>@tabItem.Name</span>
                                                </a>
                                            </li>
                                        }
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-7 col-md-8 right-block table-row padding-section right-module no-space-bottom seperate-line-right">
                <div id="@guidContainer" class="row">
                    @if (tabItems.Any())
                    {
                        for (int index = 0; index < tabItems.Count; index++)
                        {
                            var tabId = FormatTabId(guid, index);
                            var tabItem = tabItems[index];
                            var infoTabItem = tabItem as InformationTabItemBlock;

                            var additionStyle = ((string.IsNullOrEmpty(currentActiveTab) && (index == 0 || showTabForAllItem)) ||
                                                 (!(string.IsNullOrEmpty(currentActiveTab)) && currentActiveTab.Equals(tabItem.Name, StringComparison.InvariantCultureIgnoreCase)))
                                ? "block" : "none";

                            <div tab-id="@tabId" style="display: @additionStyle;">
                                <div class="col-xs-12 @(infoTabItem != null ? "col-xs-12 col-md-6" : "col-sm-12 col-md-12")">
                                    @if (infoTabItem != null)
                                    {
                                        <h2 class="heading">@infoTabItem.SubHeader</h2>
                                        <p class="description">@infoTabItem.MainBody</p>
                                        <div>@{ Html.RenderNoWrappersContentArea(infoTabItem.AddtionalContentArea); }</div>
                                    }
                                    else
                                    {
                                        Html.RenderContentData(tabItem, false);
                                    }
                                </div>
                                @if (infoTabItem != null)
                                {
                                    <div class="col-xs-12 col-md-6 image-as-background">
                                        <img src="@infoTabItem.BackgroundImage.GetFriendlyUrl()" alt="" />
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@Html.FullRefreshPropertiesMetaData(new []{ "TabItems" })